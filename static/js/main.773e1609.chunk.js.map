{"version":3,"sources":["lib/initialCells.js","components/Tree.js","components/Cell.js","components/Button.js","components/Popup.js","components/App.js","serviceWorker.js","index.js"],"names":["initialCells","Tree","props","parentName","parentId","childNodes","renderCell","renderButton","treeClass","classNames","length","headingClass","className","map","id","Cell","children","cellClass","Button","buttonClass","onButtonClick","isDisabled","onClick","disabled","type","Popup","validateForm","state","category","value","find","val","handleCategoryInputChange","isFormValid","setState","handleValueInputChange","prevState","handleSingleValueInputChange","singleValue","addNewValueInput","uuidv4","removeValue","filter","handlePopupSubmit","e","preventDefault","onPopupSubmit","editedCellId","this","onPopupCancel","heading","addButtonFlag","submitButtonClass","onSubmit","htmlFor","onChange","target","autoFocus","index","Fragment","key","content","Component","App","togglePopup","addCell","newCell","cells","addValue","newValue","cellId","cell","removeCell","setEditedCellId","callback","isMain","viewBox","xmlns","points","x","y","width","height","isNested","isAddNewCellPopup","isAddNewValuePopup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.773e1609.chunk.js","sourcesContent":["export const initialCells = [\r\n  {\r\n    \"id\":\"cf1cf9f6-52b6-4108-ad4b-54649c182d7f\",\r\n    \"category\":\"Age\",\r\n    \"value\": [\r\n      {\r\n        \"id\": \"7e76af7b-fd63-45df-a29a-a25fe6eb660e\",\r\n        \"value\":\"40+\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"id\":\"ac63c95a-03e6-4f7c-b211-6ad5175a31cb\",\r\n    \"category\":\"Ethnicity\",\r\n    \"value\": [\r\n      {\r\n        \"id\":\"094f5d4b-872b-4e00-830c-69b7dce29105\",\r\n        \"value\":\"Black\"\r\n      },\r\n      {\r\n        \"id\":\"255e4fcd-ed41-4f0b-af81-632a29d6f2a5\",\r\n        \"value\":\"Hispanic\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"id\":\"1e4c77c8-b0ce-40d3-9232-779bbe3cecb8\",\r\n    \"category\":\"Income yearly\",\r\n    \"value\": [\r\n      {\r\n        \"id\":\"4f10d4f1-8f27-4bc5-bae9-5d18a90e7c5d\",\r\n        \"value\":\"45k USD+\"\r\n      }\r\n    ]\r\n  }\r\n]","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"../scss/Tree.scss\";\r\n\r\nconst Tree = (props) => {\r\n  const {parentName, parentId, childNodes, renderCell, renderButton} = props;\r\n\r\n  const treeClass = classNames(\"Tree\", {\r\n    \"Tree--main\": parentId === \"main\",\r\n    \"Tree--child\": parentId !== \"main\",\r\n    \"Tree--empty\": childNodes.length === 0,\r\n  });\r\n  const headingClass = classNames(\"Tree__heading\", {\r\n    \"Tree__heading--main\": parentId === \"main\",\r\n    \"Tree__heading--child\": parentId !== \"main\",\r\n  });\r\n\r\n  return (\r\n    <main className={treeClass}>\r\n      <h2 className={headingClass}>{parentName}</h2>\r\n      {childNodes.map(({id}) => {\r\n        return renderCell(id, parentId);\r\n      })}\r\n      {renderButton(\"add\", parentId)}\r\n    </main>\r\n  );\r\n};\r\nexport default Tree;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"../scss/Cell.scss\";\r\n\r\nconst Cell = ({id, parentId, renderButton, children}) => {\r\n  const cellClass = classNames(\"Cell\", {\r\n    \"Cell--main\": parentId === \"main\",\r\n    \"Cell--child\": parentId !== \"main\",\r\n  });\r\n\r\n  return (\r\n    <section className={cellClass}>\r\n      {children}\r\n      {renderButton(\"remove\", parentId, id)}\r\n    </section>\r\n  );\r\n};\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport \"../scss/Button.scss\";\r\n\r\nconst Button = ({buttonClass, onButtonClick, isDisabled, children}) => {\r\n  return (\r\n    <button\r\n      className={buttonClass}\r\n      onClick={onButtonClick}\r\n      disabled={isDisabled}\r\n      type=\"button\">\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\n","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport \"../scss/Popup.scss\";\r\n\r\nclass Popup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      category: \"\",\r\n      value: [\r\n        {\r\n          id: uuidv4(),\r\n          value: \"\",\r\n        },\r\n      ],\r\n      singleValue: \"\",\r\n      isFormValid: false,\r\n    };\r\n  }\r\n\r\n  validateForm = (id) => {\r\n    const { category, value } = this.state;\r\n    return (\r\n      category.length > 0 &&\r\n      !value.find((val) => val.value.length === 0 && val.id !== id)\r\n    );\r\n  };\r\n\r\n  handleCategoryInputChange = (value) => {\r\n    const isFormValid =\r\n      value.length > 0 &&\r\n      !this.state.value.find((val) => val.value.length === 0);\r\n\r\n    this.setState({\r\n      category: value,\r\n      isFormValid,\r\n    });\r\n  };\r\n\r\n  handleValueInputChange = (value, id) => {\r\n    const isFormValid = this.validateForm(id) && value.length > 0;\r\n\r\n    this.setState((prevState) => {\r\n      prevState.value.find((val) => val.id === id).value = value;\r\n      return {\r\n        value: [...prevState.value],\r\n        isFormValid,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleSingleValueInputChange = (value) => {\r\n    this.setState({\r\n      singleValue: value,\r\n      isFormValid: value.length > 0,\r\n    });\r\n  };\r\n\r\n  addNewValueInput = () => {\r\n    this.setState((prevState) => ({\r\n      value: [\r\n        ...prevState.value,\r\n        {\r\n          id: uuidv4(),\r\n          value: \"\",\r\n        },\r\n      ],\r\n      isFormValid: false,\r\n    }));\r\n  };\r\n\r\n  removeValue = (id) => {\r\n    const isFormValid = this.validateForm(id);\r\n\r\n    this.setState((prevState) => ({\r\n      value: prevState.value.filter((val) => val.id !== id),\r\n      isFormValid,\r\n    }));\r\n  };\r\n\r\n  handlePopupSubmit = (e) => {\r\n    e.preventDefault();\r\n    const {category, value, singleValue} = this.state;\r\n    const {onPopupSubmit, editedCellId} = this.props;\r\n\r\n    if (editedCellId) {\r\n      onPopupSubmit(\r\n        {\r\n          id: uuidv4(),\r\n          value: singleValue,\r\n        },\r\n        editedCellId\r\n      );\r\n    } else {\r\n      onPopupSubmit({\r\n        id: uuidv4(),\r\n        category,\r\n        value,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {category, value, singleValue, isFormValid} = this.state;\r\n    const {onPopupCancel, renderButton, editedCellId} = this.props;\r\n    const heading = editedCellId ? \"Add Value\" : \"Add Cell\";\r\n\r\n    const addButtonFlag = isFormValid ? \"popup\" : \"disabled\";\r\n    const submitButtonClass = classNames(\r\n      \"Popup__button Popup__button--submit\",\r\n      {\r\n        \"Popup__button--disabled\": !isFormValid,\r\n      }\r\n    );\r\n\r\n    return (\r\n      <div className=\"Popup\">\r\n        <form className=\"Popup__form\" onSubmit={this.handlePopupSubmit}>\r\n          <h2 className=\"Popup__heading\">{heading}</h2>\r\n\r\n          {!editedCellId ? (\r\n            <>\r\n              {/* CATEGORY */}\r\n              <label htmlFor=\"popupCategory\" className=\"Popup__label\">\r\n                Category:\r\n              </label>\r\n              <input\r\n                id=\"popupCategory\"\r\n                type=\"text\"\r\n                className=\"Popup__input\"\r\n                value={category}\r\n                onChange={(e) => this.handleCategoryInputChange(e.target.value)}\r\n                autoFocus\r\n              />\r\n\r\n              {/* VALUES */}\r\n              <label htmlFor=\"popupValue\" className=\"Popup__label\">\r\n                Value:\r\n              </label>\r\n              {value.map((value, index) => {\r\n                return (\r\n                  <React.Fragment key={value.id}>\r\n                    <input\r\n                      key={value.id}\r\n                      id={index === 0 ? \"popupValue\" : value.id}\r\n                      type=\"text\"\r\n                      className=\"Popup__input Popup__input--value\"\r\n                      value={value.content}\r\n                      onChange={(e) =>\r\n                        this.handleValueInputChange(e.target.value, value.id)\r\n                      }\r\n                    />\r\n                    {index === 0\r\n                      ? renderButton(\r\n                          \"add\",\r\n                          addButtonFlag,\r\n                          null,\r\n                          this.addNewValueInput\r\n                        )\r\n                      : renderButton(\"remove\", \"popup\", null, () =>\r\n                          this.removeValue(value.id)\r\n                        )}\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n            </>\r\n          ) : (\r\n            <>\r\n              {/* NEW VALUE */}\r\n              <label htmlFor=\"popupSingleValue\" className=\"Popup__label\">\r\n                New Value:\r\n              </label>\r\n              <input\r\n                id=\"popupSingleValue\"\r\n                type=\"text\"\r\n                className=\"Popup__input\"\r\n                value={singleValue}\r\n                onChange={(e) =>\r\n                  this.handleSingleValueInputChange(e.target.value)\r\n                }\r\n                autoFocus\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {/* BUTTONS */}\r\n          <button\r\n            type=\"submit\"\r\n            disabled={!isFormValid}\r\n            className={submitButtonClass}>\r\n            Add\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"Popup__button Popup__button--cancel\"\r\n            onClick={onPopupCancel}>\r\n            Cancel\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Popup;\r\n","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {initialCells} from \"../lib/initialCells\";\r\nimport Tree from \"./Tree.js\";\r\nimport Cell from \"./Cell.js\";\r\nimport Button from \"./Button.js\";\r\nimport Popup from \"./Popup.js\";\r\nimport \"../scss/App.scss\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cells: initialCells,\r\n      isAddNewCellPopup: false,\r\n      isAddNewValuePopup: false,\r\n      editedCellId: null,\r\n    };\r\n  }\r\n\r\n  togglePopup = (type, parentId) => {\r\n    this.setState((prevState) => ({\r\n      [`isAddNew${type}Popup`]: !prevState[`isAddNew${type}Popup`],\r\n      editedCellId: parentId ? parentId : null,\r\n    }));\r\n  };\r\n\r\n  addCell = (newCell) => {\r\n    this.setState((prevState) => ({\r\n      cells: [...prevState.cells, newCell],\r\n    }));\r\n    this.togglePopup(\"Cell\");\r\n  };\r\n\r\n  addValue = (newValue, cellId) => {\r\n    const cell = this.state.cells.find((cell) => cell.id === cellId);\r\n    cell.value = [...cell.value, newValue];\r\n    this.setState((prevState) => ({cells: [...prevState.cells]}));\r\n    this.togglePopup(\"Value\");\r\n  };\r\n\r\n  removeCell = (id) => {\r\n    this.setState((prevState) => ({\r\n      cells: prevState.cells.filter((cell) => cell.id !== id),\r\n    }));\r\n  };\r\n\r\n  removeValue = (parentId, id) => {\r\n    const cell = this.state.cells.find((cell) => cell.id === parentId);\r\n    cell.value = cell.value.filter((val) => val.id !== id);\r\n\r\n    this.setState((prevState) => ({cells: [...prevState.cells]}));\r\n  };\r\n\r\n  setEditedCellId = (id) => {\r\n    this.setState({editedCellId: id});\r\n  };\r\n\r\n  renderButton = (type, parentId, id, callback) => {\r\n    const isMain = parentId === \"main\";\r\n    const isNested = () => {\r\n      return type === \"remove\" && isMain\r\n        ? this.state.cells.find((cell) => cell.id === id).value.length > 1\r\n        : false;\r\n    };\r\n    const isDisabled = parentId === \"disabled\";\r\n\r\n    const buttonClass = classNames(\"Button\", `Button--${type}`, {\r\n      \"Button--main\": isMain && type === \"add\",\r\n      \"Button--absolute\": isMain && isNested() && type === \"remove\",\r\n      \"Button--popup\": parentId === \"popup\",\r\n      \"Button--disabled\": parentId === \"disabled\",\r\n    });\r\n\r\n    const onButtonClick = callback\r\n      ? callback\r\n      : type === \"add\"\r\n      ? isMain\r\n        ? () => this.togglePopup(\"Cell\")\r\n        : () => this.togglePopup(\"Value\", parentId)\r\n      : isMain\r\n      ? () => this.removeCell(id)\r\n      : () => this.removeValue(parentId, id);\r\n\r\n    return (\r\n      <Button\r\n        buttonClass={buttonClass}\r\n        onButtonClick={onButtonClick}\r\n        isDisabled={isDisabled}>\r\n        <svg\r\n          className=\"Button__svg\"\r\n          viewBox=\"0 0 40 40\"\r\n          xmlns=\"http://www.w3.org/2000/svg\">\r\n          {type === \"add\" ? (\r\n            <polyline points=\"0,15 0,25 15,25 15,40 25,40 25,25 40,25 40,15 25,15 25,0 15,0 15,15\" />\r\n          ) : (\r\n            <rect x=\"0\" y=\"12.5\" width=\"40\" height=\"15\" />\r\n          )}\r\n        </svg>\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  renderCell = (id, parentId) => {\r\n    const {cells} = this.state;\r\n    const isMain = parentId === \"main\";\r\n    const isNested =\r\n      isMain && cells.find((cell) => cell.id === id).value.length > 1;\r\n    const cell = cells.find((cell) =>\r\n      !isNested && !isMain ? cell.id === parentId : cell.id === id\r\n    );\r\n    const {category} = cell;\r\n    const {value} = isNested\r\n      ? cell\r\n      : isMain\r\n      ? cell.value[0]\r\n      : cell.value.find((value) => value.id === id);\r\n\r\n    return (\r\n      <Cell\r\n        key={id}\r\n        id={id}\r\n        parentId={parentId}\r\n        renderButton={this.renderButton}>\r\n        {isNested ? (\r\n          <Tree\r\n            parentName={category}\r\n            parentId={id}\r\n            childNodes={value}\r\n            renderCell={this.renderCell}\r\n            renderButton={this.renderButton}\r\n          />\r\n        ) : (\r\n          <h3 className=\"Cell__heading\">\r\n            {isMain ? `${category} ${value}` : value}\r\n          </h3>\r\n        )}\r\n      </Cell>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isAddNewCellPopup,\r\n      isAddNewValuePopup,\r\n      cells,\r\n      editedCellId,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App__header\">\r\n          <h1>Nested Cells</h1>\r\n        </header>\r\n\r\n        <Tree\r\n          parentName=\"People\"\r\n          parentId=\"main\"\r\n          childNodes={cells}\r\n          renderCell={this.renderCell}\r\n          renderButton={this.renderButton}\r\n        />\r\n\r\n        {\r\n          // CELL POPUP\r\n          isAddNewCellPopup && (\r\n            <Popup\r\n              onPopupCancel={() => this.togglePopup(\"Cell\")}\r\n              onPopupSubmit={this.addCell}\r\n              renderButton={this.renderButton}\r\n            />\r\n          )\r\n        }\r\n\r\n        {\r\n          // VALUE POPUP\r\n          isAddNewValuePopup && (\r\n            <Popup\r\n              editedCellId={editedCellId}\r\n              onPopupCancel={() => this.togglePopup(\"Value\")}\r\n              onPopupSubmit={this.addValue}\r\n              renderButton={this.renderButton}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}